# ============================================
# Redis Configuration for Idempotency
# ============================================

spring:
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 0
      timeout: 3000ms
      
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: 2000ms

# ============================================
# RabbitMQ Enhanced Configuration
# ============================================

spring:
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: ${RABBITMQ_VHOST:/}
    
    # Connection pool
    listener:
      simple:
        # Concurrent consumers per queue
        concurrency: 5
        max-concurrency: 10
        
        # Prefetch count - số message consumer lấy về cùng lúc
        prefetch: 1
        
        # Auto ack khi consumer xử lý xong
        acknowledge-mode: auto
        
        # Retry configuration
        retry:
          enabled: true
          initial-interval: 1000ms
          max-attempts: 3
          multiplier: 2.0
          max-interval: 10000ms
          
        # DLQ configuration
        default-requeue-rejected: false
        
    # Connection timeout
    connection-timeout: 10000ms
    
    # Publisher confirms để đảm bảo message đã đến RabbitMQ
    publisher-confirm-type: correlated
    publisher-returns: true
    
    # Template configuration
    template:
      mandatory: true
      retry:
        enabled: true
        initial-interval: 1000ms
        max-attempts: 3
        multiplier: 2.0

# ============================================
# Resilience4j Circuit Breaker Configuration
# ============================================

resilience4j:
  circuitbreaker:
    instances:
      userService:
        # Health indicator
        registerHealthIndicator: true
        
        # Sliding window configuration
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        
        # Failure threshold
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 5s
        
        # State transition
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        
        # Ignored exceptions (không tính vào failure rate)
        ignoreExceptions:
          - com.example.authservice.exceptions.ValidationException
          
      cvService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        
  timelimiter:
    instances:
      userService:
        timeoutDuration: 10s
        cancelRunningFuture: true
        
      cvService:
        timeoutDuration: 15s
        cancelRunningFuture: true
        
  retry:
    instances:
      userService:
        maxAttempts: 3
        waitDuration: 1000ms
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - java.util.concurrent.TimeoutException
          - java.io.IOException
          
# ============================================
# Logging Configuration
# ============================================

logging:
  level:
    # RabbitMQ debug
    org.springframework.amqp: INFO
    com.example.rabbitmq: DEBUG
    
    # Application logs
    com.example.authservice: INFO
    com.example.userservice: INFO
    com.example.cvservice: INFO
    
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# ============================================
# Actuator for Monitoring
# ============================================

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers,circuitbreakerevents
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true

# ============================================
# Custom Application Properties
# ============================================

app:
  rabbitmq:
    # RPC timeout
    rpc-timeout-seconds: 10
    
    # Idempotency
    idempotency-ttl-hours: 24
    
    # DLQ retry
    dlq-max-retry: 3
    dlq-base-delay-seconds: 5
    
    # Event publishing
    event-enabled: true
    event-exchange: events.exchange
    
    # Circuit breaker
    circuit-breaker-enabled: true
