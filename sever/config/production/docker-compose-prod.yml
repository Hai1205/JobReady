# OAuth2 Docker Compose Production Configuration
version: "3.8"

services:
  # Eureka Discovery Service
  eureka-server:
    image: your-registry/eureka-server:latest
    container_name: eureka-server-prod
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - microservices-network
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql-prod
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: jobready
      MYSQL_USER: app_user
      MYSQL_PASSWORD: ${MYSQL_APP_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq-prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network
    restart: unless-stopped

  # Gateway Service
  gateway-service:
    image: your-registry/gateway-service:latest
    container_name: gateway-service-prod
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod,oauth2
      - EUREKA_URL=http://eureka-server:8761/eureka/
      - JWT_PUBLIC_KEY_PATH=file:/secrets/public-key.pem
    volumes:
      - ./secrets:/secrets:ro
    depends_on:
      - eureka-server
    networks:
      - microservices-network
    restart: unless-stopped

  # Auth Service with OAuth2
  auth-service:
    image: your-registry/auth-service:latest
    container_name: auth-service-prod
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod,oauth2
      - EUREKA_URL=http://eureka-server:8761/eureka/
      - JWT_PRIVATE_KEY_PATH=file:/secrets/private-key.pem
      - JWT_PUBLIC_KEY_PATH=file:/secrets/public-key.pem
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - USER_SERVICE_URL=http://user-service:8083
      - APP_BASE_URL=${APP_BASE_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - FRONTEND_SUCCESS_URL=${FRONTEND_SUCCESS_URL}
      - FRONTEND_ERROR_URL=${FRONTEND_ERROR_URL}
    volumes:
      - ./secrets:/secrets:ro
    depends_on:
      - eureka-server
      - rabbitmq
    networks:
      - microservices-network
    restart: unless-stopped

  # User Service
  user-service:
    image: your-registry/user-service:latest
    container_name: user-service-prod
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod,oauth2
      - EUREKA_URL=http://eureka-server:8761/eureka/
      - DATABASE_URL=jdbc:mysql://mysql:3306/jobready
      - DATABASE_USERNAME=app_user
      - DATABASE_PASSWORD=${MYSQL_APP_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - JWT_PUBLIC_KEY_PATH=file:/secrets/public-key.pem
    volumes:
      - ./secrets:/secrets:ro
    depends_on:
      - eureka-server
      - mysql
      - rabbitmq
    networks:
      - microservices-network
    restart: unless-stopped

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - gateway-service
    networks:
      - microservices-network
    restart: unless-stopped

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - microservices-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  mysql_data:
  rabbitmq_data:
  redis_data:
  prometheus_data:
  grafana_data:
