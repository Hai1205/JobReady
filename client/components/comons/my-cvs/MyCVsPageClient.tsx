"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAuthStore } from "@/stores/authStore";
import { useCVStore } from "@/stores/cvStore";
import PageHeader from "@/components/comons/my-cvs/PageHeader";
import DeleteConfirmationDialog from "@/components/comons/my-cvs/DeleteConfirmationDialog";
import LoadingPage from "@/components/comons/layout/LoadingPage";
import UserCVsSection from "@/components/comons/my-cvs/UserCVsSection";
import TemplateCVsSection from "@/components/comons/my-cvs/TemplateCVsSection";
import { EPrivacy } from "@/types/enum";

export default function MyCVsPageClient() {
  const { userAuth } = useAuthStore();
  const {
    handleSetCurrentCVCreate,
    handleSetCurrentStep,
    deleteCV,
    duplicateCV,
    getUserCVs,
    getAllCVs,
    handleGeneratePDF,
  } = useCVStore();

  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [userCVs, setUserCVs] = useState<ICV[]>([]);
  const [templateCVs, setTemplateCVs] = useState<ICV[]>([]);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [cvToDelete, setCvToDelete] = useState<string | null>(null);

  useEffect(() => {
    const loadData = async () => {
      await loadCVs();
      await loadTemplateCVs();
    };
    loadData();
  }, [userAuth, router]);

  const loadCVs = async () => {
    if (!userAuth) return;

    setLoading(true);

    const response = await getUserCVs(userAuth.id);
    if (response?.data) {
      setUserCVs(response.data.cvs || []);
    }

    setLoading(false);
  };

  const loadTemplateCVs = async () => {
    const response = await getAllCVs();
    if (response?.data) {
      const allCvs = response.data.cvs || [];
      const publicCvs = allCvs.filter((cv) => cv.privacy === EPrivacy.PUBLIC);
      setTemplateCVs(publicCvs);
    }
  };

  const handleCreateNew = () => {
    handleSetCurrentCVCreate(null);
    handleSetCurrentStep(0);
    router.push("/cv-builder");
  };

  const handleEdit = (cv: ICV) => {
    router.push(`/cv-builder/${cv.id}`);
  };

  const handleDeleteClick = (cvId: string) => {
    setCvToDelete(cvId);
    setDeleteDialogOpen(true);
  };

  const handleDeleteConfirm = async () => {
    if (!cvToDelete) return;

    deleteCV(cvToDelete);
  };

  const handleDuplicate = (cvId: string) => {
    duplicateCV(cvId);
  };

  const handleDuplicateTemplate = async (cv: ICV) => {
    // Clone CV and add "CV của tôi" to title
    const newTitle = `${cv.title} - CV của tôi`;
    const newCV: ICV = {
      ...cv,
      id: "", // Will be generated by backend
      userId: userAuth?.id,
      title: newTitle,
      privacy: EPrivacy.PRIVATE, // Default to private for user's copy
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    handleSetCurrentCVCreate(newCV);
    router.push("/cv-builder");
  };

  if (!userAuth) {
    return null;
  }

  if (loading) {
    return <LoadingPage />;
  }

  return (
    <div className="min-h-screen flex items-center justify-center py-12">
      <div className="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex flex-col gap-8">
          <PageHeader onCreateNew={handleCreateNew} />

          <UserCVsSection
            userCVs={userCVs}
            onCreateNew={handleCreateNew}
            onEdit={handleEdit}
            onDuplicate={handleDuplicate}
            onDelete={handleDeleteClick}
          />

          <TemplateCVsSection
            templateCVs={templateCVs}
            onDuplicateTemplate={handleDuplicateTemplate}
            onDownload={handleGeneratePDF}
          />
        </div>
      </div>

      <DeleteConfirmationDialog
        open={deleteDialogOpen}
        onOpenChange={setDeleteDialogOpen}
        onConfirm={handleDeleteConfirm}
      />
    </div>
  );
}
